webpackJsonp([2],{1073:function(n,e,t){window.config=t(524)},524:function(n,e,t){"use strict";n.exports={hljsTheme:"atom-one-light",routes:{default:"/docs","/workflows":{ui:"workflows",title:"LucyBot Workflows",openapi:"kitchenSink",meta:{description:"Learn how to build interactive API documentation with LucyBot"}},"/docs":{title:"LucyBot Documentation",openapi:"kitchenSink",navigation:"navigation",ui:"documentation",meta:{title:"API Documentation"}}},navigation:[{title:"Introduction",markdownFile:"./markdown/Introduction.md",contents:"Learn how to use [LucyBot's](http://lucybot.com)\nAPI documentation tools.\n\n## Getting Started\nYou can try the free version of LucyBot [on GitHub](https://github.com/lucybot/lucy-console).\nSimply replace openapi.json with your [OpenAPI](https://www.openapis.org/) specification.\n\nThe rest of this documentation applies only to the full version - you can purchase\naccess at [lucybot.com](http://lucybot.com).\n\n### Installation\n> You'll need the latest versions of\n> [NodeJS (6.x)](https://nodejs.org/en/download/) and\n> [npm](http://blog.npmjs.org/post/85484771375/how-to-install-npm)\n\nUpon purchase, you'll be given an access key that allows you to install the latest\nversion of LucyBot:\n\n```\nnpm install -g https://$YOUR_ACCESS_KEY@github.com/lucybot/lucy-api-portal\nlucybot --version\n```\n\n\n\n"},{title:"LucyBot.yml",markdownFile:"./markdown/CreateLucyBotYml.md",expand:!0,children:[{markdownFile:"./markdown/Specifications.md",contents:"## API Specifications\nYou can generate documentation for APIs described in OpenAPI, RAML,\nAPI Blueprint, WADL, or I/O Docs.\n\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n  bugs_api:\n    - api_blueprint: ./apibp.md\n  daffy_api:\n    - raml: ./raml.json\n```\n\n### Versioning\nYou can also specify multiple versions per key.  The user will be able to switch\nversions from within the UI, or you can specify the `?apiVersion=` query parameter.\n\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n      label: v1.0\n  daffy_api:\n    - raml: ./raml_spec.yml\n      label: v2.1\n    - raml: ./legacy/v1.0/raml_spec.yml\n      label: v1.0\n```\n\n",title:"API Specifications"},{markdownFile:"./markdown/Routing.md",contents:"### Routing and UIs\n\nConsider the minimal configuration:\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n```\n\nLucyBot will generate the following URLs by default:\n```\n/acme_api/documentation\n/acme_api/console\n```\n\nAdditionally, those pages will have multiple sub-pages available:\n```\n/acme_api/documentation/Introduction\n/acme_api/documentation/Users/getUser\n/acme_api/documentation/Users/editUser\n...\n/acme_api/console/Users/getUser\n/acme_api/console/Users/editUser\n...\n```\n\nSee the [Navigation](Navigation) section for more info on structuring sub-pages.\n\n#### Custom Routing\nYou can define the `routes` field in LucyBot.yml to control the URL structure\nof your documentation. You can also use this to specify the text of `<meta>`\nand `<title>` tags on the page.\n\nThere are several UIs available:\n* documentation - A set of pages driven by markdown files, API operations, and JSON Schema\n* console - An API test console for making live calls\n* markdown - A single page with markdown or HTML content\n* workflow - A step-by-step tutorial\n* gallery - If there are multiple APIs, this can be used as the homepage\n\n```yaml\nroutes:\n  default: '/docs'\n\n  /console\n    ui: console\n    from: acme_api\n    meta:\n      title: ACME API Console\n\n  /docs:\n    ui: documentation\n    from: acme_api\n    meta:\n      title: ACME Documentation\n      description: \"Learn how to use ACME products.\"\n```\n\n",title:"Routing and UIs"},{markdownFile:"./markdown/Navigation.md",contents:'## Navigation\nBy default, LucyBot will use your API specification to build the left-hand navigation\nin the `console` and `documentation` UIs. You can add new sections, or customize the grouping and order\nof items in the menu. The example below will generate a menu with the following structure:\n\n* Introduction\n* Getting Started\n  * Getting an API Key\n* Operations\n  * getWidget\n  * addWidget\n  * Users\n    * getUser\n    * editUser\n* Object Schemas\n  * User\n  * Widget\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    for: acme_api\n    navigation:\n\n      - title: Introduction\n        markdown: |\n          # ACME Documentation\n          Welcome to the documentation for the ACME API.\n          Use the menu to read more about the API, or\n          visit the [API Console](console) to make test calls.\n\n      - title: Getting Started\n        markdownFile: ./GettingStarted.md\n\n      // Nest navigation items to create multiple levels\n      - title: Operations\n        children:\n          // You can reference operations in the OpenAPI spec\n          - operation: "GET /widget"  // Use method and path\n          - operation: "addWidget"    // or operationId\n\n          - tag: users // References the \'users\' tag in the OpenAPI spec.\n                       // The item\'s children will be all the operations with this tag.\n\n      - title: Object Schemas\n        children:\n          - definition: User   // References \'definitions\' field in the OpenAPI spec.\n          - definition: Widget\n```\n\nThe `navigation` field can be set for any route. If you want to reuse\na navigation menu for multiple routes, you can reference it by it\'s field name:\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    for: acme_api\n    navigation: acme_navigation\n  /console\n    ui: console\n    for: acme_api\n    navigation: acme_navigation\n\nacme_navigation:\n  - markdownFile: ./Introduction\n  - operation: "GET /widget"\n  - operation: "POST /widget"\n```\n\nNavigation items can be nested to create multiple levels in the menu (we\nrecommend a maxiumum depth of 3). Each navigation item will be\navailable at a unique URL on the generated website.\n\nThe following fields are available on each navigation item:\n* title - The title of the item\n* hide - Hide the item from being shown in the UI\n* expand - Always show this item\'s children\n* meta - Controls `<meta>` and `<title>` tags\n  * meta.title - By default, will be {{ title }} - {{ pageTitle }}\n  * meta.description\n* children - Any sub-items to be nested under this item\n\nYou can control the content shown when the navigation item is clicked by specifying\n**one** of the following fields:\n* markdown - This is treated as a raw markdown string, like in the\n"Introduction" section above.\n* markdownFile - This is markdown read from a file somewhere in your repository\n* operation - This is the `operationId` of an OpenAPI operation (or a method and path in the form "GET /foo/bar")\n* definition - The name of an OpenAPI JSON Schema definition\n* tag - The name of an OpenAPI tag. Every matching operation will be added as a child.\n\n\n',title:"Navigation"}],contents:"## Create a LucyBot.yml file\nIn the top-level directory of your repository, create a LucyBot.yml\nfile.  This will tell LucyBot how to build your documentation.\n\nHere's a minimal LucyBot.yml:\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n      label: 'v1.0'\n```\n\nThe following fields are available in LucyBot.yml:\n\n* `specifications` - A list of different API specifications to generate docs for. See [Specifications](Specifications)\n* `routes` - Controls URL structure, navigation, and SEO. See [Routing](Routing)\n* `hljsTheme` - A theme name for highlightjs\n* `templates` - HTML files included in every page\n  * `templates.navbar`\n  * `templates.footer`\n  * `templates.loading`\n* `javascript` - An array of JavaScript files to include\n* `css` - An array of CSS files to include\n* `assets` - An array of files (e.g. images or fonts) to be copied\n* `sitemap` - Options for generating sitemap.xml\n  * `sitemap.hostname`\n* `github` - Options for GitHub authentication (to enable editing)\n  * `github.repo` - The name of the repository LucyBot.yml is in\n  * `github.redirect_uri`\n  * `github.client_id`\n\n\n"}],basePath:"/",sitemap:!1,workflows:{},codegen:{disabled:!0,languages:[],templates:{},setupTemplates:{}},bootstrap:{bootstrapVersion:3,styleLoaders:["style-loader","css-loader","sass-loader"],styles:!0},jsIncludes:[],cssIncludes:[],github:{redirect_uri:"",client_id:"",repo:"",workflowDirectory:"workflows"},templates:{navbar:"\n\n",loading:'<style>\n  .loading-screen {\n    min-height: 500px;\n    text-align: center;\n    padding-top: 100px;\n  }\n</style>\n<div id="LoadingScreen" class="loading-screen">\n  <h1><i class="fa fa-spin fa-refresh"></i><h1>\n</div>\n\n'}}}},[1073]);