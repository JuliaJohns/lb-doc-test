webpackJsonp([2],{1073:function(n,e,t){window.config=t(524)},524:function(n,e,t){"use strict";n.exports={hljsTheme:"atom-one-light",routes:{default:"/docs","/workflows":{ui:"workflows",title:"LucyBot Workflows",meta:{description:"Learn how to build interactive API documentation with LucyBot"}},"/docs":{title:"LucyBot Documentation",navigation:"navigation",ui:"documentation",meta:{title:"API Documentation"}}},navigation:[{title:"Introduction",markdownFile:"./markdown/Introduction.md",contents:"Learn how to use [LucyBot's](http://lucybot.com)\nAPI documentation tools.\n\n## Getting Started\nYou can try the free version of LucyBot [on GitHub](https://github.com/lucybot/lucy-console).\nSimply replace openapi.json with your [OpenAPI](https://www.openapis.org/) specification.\n\nThe rest of this documentation applies only to the full version - you can purchase\naccess at [lucybot.com](http://lucybot.com).\n\n### Installation\n> You'll need the latest versions of\n> [NodeJS (6.x)](https://nodejs.org/en/download/) and\n> [npm](http://blog.npmjs.org/post/85484771375/how-to-install-npm)\n\nUpon purchase, you'll be given an access key that allows you to install the latest\nversion of LucyBot:\n\n```\nnpm install -g https://$YOUR_ACCESS_KEY@github.com/lucybot/lucy-api-portal\nlucybot --version\n```\n\n\n\n"},{title:"LucyBot.yml",markdownFile:"./markdown/CreateLucyBotYml.md",expand:!0,children:[{markdownFile:"./markdown/Specifications.md",contents:"## API Specifications\nYou can generate documentation for APIs described in OpenAPI, RAML,\nAPI Blueprint, WADL, or I/O Docs.\n\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n  bugs_api:\n    - api_blueprint: ./apibp.md\n  daffy_api:\n    - raml: ./raml.json\n```\n\n### Versioning\nYou can also specify multiple versions per key.  The user will be able to switch\nversions from within the UI, or you can specify the `?apiVersion=` query parameter.\n\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n      label: v1.0\n  daffy_api:\n    - raml: ./raml_spec.yml\n      label: v2.1\n    - raml: ./legacy/v1.0/raml_spec.yml\n      label: v1.0\n```\n\n",title:"API Specifications"},{markdownFile:"./markdown/Routing.md",contents:"### Routing and UIs\n\nConsider the minimal configuration:\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n```\n\nLucyBot will generate the following URLs by default:\n```\n/acme_api/documentation\n/acme_api/console\n```\n\nAdditionally, those pages will have multiple sub-pages available:\n```\n/acme_api/documentation/Introduction\n/acme_api/documentation/Users/getUser\n/acme_api/documentation/Users/editUser\n...\n/acme_api/console/Users/getUser\n/acme_api/console/Users/editUser\n...\n```\n\nSee the [Navigation](Navigation) section for more info on structuring sub-pages.\n\n#### Custom Routing\nYou can define the `routes` field in LucyBot.yml to control the URL structure\nof your documentation. You can also use this to specify the text of `<meta>`\nand `<title>` tags on the page.\n\nThere are several UIs available:\n* documentation - A set of pages driven by markdown files, API operations, and JSON Schema\n* console - An API test console for making live calls\n* markdown - A single page with markdown or HTML content\n* workflow - A step-by-step tutorial\n* gallery - If there are multiple APIs, this can be used as the homepage\n\n```yaml\nroutes:\n  default: '/docs'\n\n  /console\n    ui: console\n    from: acme_api\n    meta:\n      title: ACME API Console\n\n  /docs:\n    ui: documentation\n    from: acme_api\n    meta:\n      title: ACME Documentation\n      description: \"Learn how to use ACME products.\"\n```\n\n",title:"Routing and UIs"},{markdownFile:"./markdown/Navigation.md",contents:'## Navigation\nBy default, LucyBot will use your API specification to build the left-hand navigation\nin the `console` and `documentation` UIs. You can add new sections, or customize the grouping and order\nof items in the menu. The example below will generate a menu with the following structure:\n\n* Introduction\n* Getting Started\n  * Getting an API Key\n* Operations\n  * getWidget\n  * addWidget\n  * Users\n    * getUser\n    * editUser\n* Object Schemas\n  * User\n  * Widget\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    for: acme_api\n    navigation:\n\n      - title: Introduction\n        markdown: |\n          # ACME Documentation\n          Welcome to the documentation for the ACME API.\n          Use the menu to read more about the API, or\n          visit the [API Console](console) to make test calls.\n\n      - title: Getting Started\n        markdownFile: ./GettingStarted.md\n\n      // Nest navigation items to create multiple levels\n      - title: Operations\n        children:\n          // You can reference operations in the OpenAPI spec\n          - operation: "GET /widget"  // Use method and path\n          - operation: "addWidget"    // or operationId\n\n          - tag: users // References the \'users\' tag in the OpenAPI spec.\n                       // The item\'s children will be all the operations with this tag.\n\n      - title: Object Schemas\n        children:\n          - definition: User   // References \'definitions\' field in the OpenAPI spec.\n          - definition: Widget\n```\n\nThe `navigation` field can be set for any route. If you want to reuse\na navigation menu for multiple routes, you can reference it by it\'s field name:\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    for: acme_api\n    navigation: acme_navigation\n  /console\n    ui: console\n    for: acme_api\n    navigation: acme_navigation\n\nacme_navigation:\n  - markdownFile: ./Introduction\n  - operation: "GET /widget"\n  - operation: "POST /widget"\n```\n\nNavigation items can be nested to create multiple levels in the menu (we\nrecommend a maxiumum depth of 3). Each navigation item will be\navailable at a unique URL on the generated website.\n\nThe following fields are available on each navigation item:\n* title - The title of the item\n* hide - Hide the item from being shown in the UI\n* expand - Always show this item\'s children\n* meta - Controls `<meta>` and `<title>` tags\n  * meta.title - By default, will be {{ title }} - {{ pageTitle }}\n  * meta.description\n* children - Any sub-items to be nested under this item\n\nYou can control the content shown when the navigation item is clicked by specifying\n**one** of the following fields:\n* markdown - This is treated as a raw markdown string, like in the\n"Introduction" section above.\n* markdownFile - This is markdown read from a file somewhere in your repository\n* operation - This is the `operationId` of an OpenAPI operation (or a method and path in the form "GET /foo/bar")\n* definition - The name of an OpenAPI JSON Schema definition\n* tag - The name of an OpenAPI tag. Every matching operation will be added as a child.\n\n\n',title:"Navigation"}],contents:"## Create a LucyBot.yml file\nIn the top-level directory of your repository, create a LucyBot.yml\nfile.  This will tell LucyBot how to build your documentation.\n\nHere's a minimal LucyBot.yml:\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n```\n\nThe following fields are available in LucyBot.yml:\n\n* `specifications` - A list of different API specifications to generate docs for. See [Specifications](Specifications)\n* `routes` - Controls URL structure, navigation, and SEO. See [Routing](Routing)\n* `hljsTheme` - A theme name for highlightjs\n* `templates` - HTML files included in every page\n  * `templates.navbar`\n  * `templates.footer`\n  * `templates.loading`\n* `javascript` - An array of JavaScript files to include\n* `css` - An array of CSS files to include\n* `assets` - An array of files (e.g. images or fonts) to be copied\n* `sitemap` - Options for generating sitemap.xml\n  * `sitemap.hostname`\n* `github` - Options for GitHub authentication (to enable editing)\n  * `github.repo` - The name of the repository LucyBot.yml is in\n  * `github.redirect_uri`\n  * `github.client_id`\n\n\n"},{title:"Branding and Customization",markdown:"LucyBot offers several options for customizing the look and\nfeel of your documentation. You can use Bootstrap themes\nto specify your brand's preferred colors and fonts, and include\nHTML templates to customize the navbar, footer, and loading screen.\n",children:[{markdownFile:"./markdown/Bootstrap.md",contents:'## Create a Custom Bootstrap Theme\n\nBootstrap offers a large set of variables to control fonts,\nsizing, and colors on the page. You can check out a sample\nset of Bootstrap themes on [Bootswatch](https://bootswatch.com/).\n\nThe easiest way to add a Bootstrap theme is to create the file\n`styles/bootstrap.scss`, which should set any Bootstrap variables\nyou care about. You can create this file from the Bootswatch themes\nabove by clicking "Download" -> "_variables.scss".\n\nFor example, `styles/bootstrap.scss` could look like this:\n```sass\n$brand-primary: #df691a !default;\n$brand-success: #43ac6a !default;\n$brand-info: #5bc0de !default;\n$brand-warning: #E99002 !default;\n$brand-danger: #F04124 !default;\n```\n\nYou can also include fonts in `bootstrap.scss`:\n```sass\n@import url(\'https://fonts.googleapis.com/css?family=Lato:regular,italic,900\');\n$font-family-sans-serif: "Lato", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif !default;\n```\n\n### Customization Tools\nThere are many tools for creating custom Bootstrap themes. We like:\n* [Strapping!](https://bobby-brennan.github.io/strapping)\n* [Bootstrap Live Customizer](http://bootstrap-live-customizer.com/)\n',title:"Create a Custom Bootstrap Theme"},{markdownFile:"./markdown/Templates.md",contents:'You can create HTML templates to customize the navbar at the top of the screen,\nthe footer at the bottom, and the loading screen shown briefly when users first\nvisit the site.\n\nNote that you have access to both [Bootstrap classes](http://getbootstrap.com)\nand [Font Awesome icons](http://fontawesome.io/icons/).\n\n\n### Navbar\nNavbar HTML should be contained in `templates/navbar.html`.\n\nThe navbar should use [Bootstrap\'s Navbar classes](http://getbootstrap.com/components/#navbar).\n\nHere\'s an example:\n```html\n<nav class="navbar navbar-inverse">\n  <div class="container-fluid">\n    <div class="navbar-header">\n      <a href="/" class="navbar-brand">\n        ACME API\n      </a>\n    </div>\n    <ul class="nav navbar-nav navbar-right">\n      <li>\n        <a href="http://lucybot.com" target="_blank">Document your API</a>\n      </li>\n    </ul>\n  </div>\n</nav>\n```\n\n### Footer\nFooter HTML should be contained in `templates/footer.html`.\n\nThe footer can contain any HTML, but it\'s recommended you wrap it with a\n`container-fluid` to preserve alignment.\n\n```html\n<div class="container-fluid">\n  <div class="row">\n    <div class="col-xs-6">\n      Copyright &copy; 2017 ACME Inc.\n    </div>\n    <div class="col-xs-6 text-right">\n      <a href="/disclaimer">Terms</a>\n    </div>\n  </div>\n</div>\n```\n\n### Loading\nLoading HTML should be contained in `templates/loading.html`.\n\nHere\'s the default loading template:\n```html\n<style>\n  .loading-screen {\n    text-align: center;\n    padding-top: 100px;\n  }\n</style>\n<div id="LoadingScreen" class="loading-screen">\n  <h1><i class="fa fa-spin fa-refresh"></i><h1>\n</div>\n```\n',title:"Untitled"},{title:"Extras",markdownFile:"./markdown/CustomizationExtras.md",markdown:"",contents:"## Favicon\nYou can specify the site's favicon URL in LucyBot.yml, e.g.\n```yaml\nfavicon: http://example.com/favicon.ico\n```\n\nIf the favicon file is located in your [assets directory](../Including_Assets),\nyou can reference it locally:\n```yaml\nfavicon: assets/favicon.ico\n```\n\n"}],contents:"LucyBot offers several options for customizing the look and\nfeel of your documentation. You can use Bootstrap themes\nto specify your brand's preferred colors and fonts, and include\nHTML templates to customize the navbar, footer, and loading screen.\n"},{title:"Search Engine Optimization",markdownFile:"./markdown/SEO.md",contents:'LucyBot\'s SEO tools allow you to control how your documentation appears in\nsearch results.  You can set the `<meta>` and `<title>` tags for any page in your\ndocs. You can also generate a sitemap for the entire site.\n\nIf you don\'t manually set these tags, LucyBot will use your API specification\nand markdown to auto-generate them.\n\n### Top-level pages\nEach page specified in the `routes` section of `LucyBot.yml` can have it\'s own\nmeta tags:\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    meta:\n      title: "ACME API Documentation"\n      description: "Documentation for using the ACME API"\n```\n\nSearch engines will then *usually* show the following in search results:\n\n------------\n\n#### ACME API Documentation\nDocumentation for using the ACME API\n\n------------\n\n### Sub-pages\nYou can also set additional meta info for sub-pages within each route.\nThe sub-page\'s title will still include the top-level title. For example:\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    meta:\n      title: "ACME API Documentation"\n      description: "Documentation for using the ACME API"\n    navigation\n      - title: Introduction\n        markdownFile: ./Introduction.md\n        meta:\n          title: "Getting Started"\n```\n\nThis will make the `<title>` for the Introduction page "Getting Started - ACME API Documentation".\nHad we not specified the `meta` section for the Introduction item, the title would have been\n"Introduction - ACME API Documentation".\n\n### Sitemap\nTo generate a sitemap, add the following to LucyBot.yml:\n\n```yaml\nsitemap:\n  hostname: https://docs.acme.com\n```\n\nReplacing `docs.acme.com` with your hostname.\n\n'},{title:"User and Event Tracking",markdownFile:"./markdown/Tracking.md",contents:'User and event tracking is a great way to understand what your users\nare looking at and what you can do to help them succeed. By default,\nLucyBot supports [Mixpanel](http://mixpanel.com), which has a sizeable\nfree tier. However, you can also use Google Analytics or other event\ntracking systems.\n\n### Mixpanel\nTo add Mixpanel tracking, you\'ll need to copy the JavaScript code\nprovided by mixpanel into the file `javascript/mixpanel.js` (be sure\nto remove the `<script>` tags).\n\nFor example:\n```js\n(function(f,b){if(!b.__SV){var a,e,i,g;window.mixpanel=b;b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");2==a.length&&(b=b[a[0]],h=a[1]);b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==typeof d?c=b[d]=[]:d="mixpanel";c.people=c.people||[];c.toString=function(b){var a="mixpanel";"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};c.people.toString=function(){return c.toString(1)+".people (stub)"};i="disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");\nfor(g=0;g<i.length;g++)f(c,i[g]);b._i.push([a,e,d])};b.__SV=1.2;a=f.createElement("script");a.type="text/javascript";a.async=!0;a.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";e=f.getElementsByTagName("script")[0];e.parentNode.insertBefore(a,e)}})(document,window.mixpanel||[]);\nmixpanel.init("YOUR_MIXPANEL_ID");\n```\n\n### Other trackers\nYou can add the file `javascript/tracking.js`, and define a function which\nsends tracking events to the system of your choice.\nThe function should take in an event name, and an object with key-value properties.\n\nFor example, to use Google Analytics:\n\n```js\n/* Paste Google Analytics setup here */\n\nwindow.lucybot.tracker = function(name, properties) {\n  for (var key in properties) {\n    ga(\'send\', {\n      hitType: \'event\',\n      eventCategory: name,\n      eventAction: key,\n      eventLabel: key,\n      eventValue: properties[key],\n    })\n  }\n}\n```\n'}],basePath:"/",sitemap:!1,workflows:{},codegen:{disabled:!0,languages:[],templates:{},setupTemplates:{}},bootstrap:{bootstrapVersion:3,styleLoaders:["style-loader","css-loader","sass-loader"],styles:!0},jsIncludes:[],cssIncludes:[],github:{redirect_uri:"",client_id:"",repo:"",workflowDirectory:"workflows"},templates:{navbar:"\n\n",loading:'<style>\n  .loading-screen {\n    min-height: 500px;\n    text-align: center;\n    padding-top: 100px;\n  }\n</style>\n<div id="LoadingScreen" class="loading-screen">\n  <h1><i class="fa fa-spin fa-refresh"></i><h1>\n</div>\n\n'}}}},[1073]);