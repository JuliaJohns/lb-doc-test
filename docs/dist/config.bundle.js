webpackJsonp([2],{1074:function(n,e,t){window.config=t(524)},524:function(n,e,t){"use strict";n.exports={hljsTheme:"atom-one-light",routes:{"/":{navigation:"navigation",meta:{title:"LucyBot Documentation"},ui:"documentation"}},favicon:"assets/favicon.ico",sitemap:{hostname:"http://docs.lucybot.com"},navigation:[{markdownFile:"./markdown/Introduction.md",contents:"## Introduction\n\nLucyBot's Documentation Generator uses open standards like Markdown and\nOpenAPI (or RAML/WADL/etc.) to create a fully customizable website.\nLearn more about LucyBot's tools at [lucybot.com](http://lucybot.com).\n\n### Getting Started\nYou can try the starter version of LucyBot [on GitHub](https://github.com/LucyBot-Inc/documentation-starter).\n\n**The rest of this documentation applies only to the full version** - visit\n[lucybot.com](http://lucybot.com) for access.\n\n### Installation\n> You'll need the latest versions of\n> [NodeJS (6.x)](https://nodejs.org/en/download/) and\n> [npm](http://blog.npmjs.org/post/85484771375/how-to-install-npm)\n\nUpon purchase, you'll be given an access key that allows you to install the latest\nversion of LucyBot:\n\n```\nnpm install -g https://$YOUR_ACCESS_KEY@github.com/LucyBot-Inc/documentation-generator\nlucybot --version\n```\n\n### Setup\nCreate a new directory to hold your LucyBot configuration and any API specifications,\nMarkdown files, HTML assets, etc:\n\n```\nmkdir acme_docs\ntouch acme_docs/LucyBot.yml\n```\n\n### Examples\n* [LucyBot docs](https://github.com/LucyBot-Inc/lucybot-docs) - The repository that drives the documentation seen here\n* [Kaltura Developer Platform](https://github.com/kaltura/developer-platform) - For Kaltura's VPaaS documentation\n* [AnyAPI](https://github.com/LucyBot-Inc/AnyAPI) - Documentation for 300+ APIs\n",title:"Introduction"},{markdownFile:"./markdown/LucyBotYml.md",expand:!0,children:[{markdownFile:"./markdown/Routing.md",children:[{markdownFile:"./markdown/uis/Documentation.md",contents:"## Documentation\n\nThe documentation UI is the core LucyBot UI. It is the UI used for\ndocs.lucybot.com.\n\nThe documentation UI consists of a left-hand\nnavigation (or, on mobile, a dropdown at the top of the page), and a\ncontent area that can display Markdown, HTML, API operations, or\nobject schemas.\n\nSee [Navigation](LucyBot_yml/Navigation) for more information on\nconstructing the left-hand navigation menu.\n\n#### Example\n```yaml\nroutes:\n  /api-docs:\n    ui: documentation\n    for: acme_api\n    navigation:\n      - markdownFile: ./Introduction.md\n      - markdownFile: ./GetAnAPIKey.md\n      - title: Operations\n        children:\n          - tag: Users\n          - tag: Widgets\n          - tag: Doodads\n```\n",title:"Documentation"},{markdownFile:"./markdown/uis/Console.md",contents:"## Console\n\nThe console UI can be used to make live calls to an API.\nIt can perform authentication (username/password, API key,\nor OAuth 2.0) via OpenAPI's\n[security definitions](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#securityDefinitionsObject).\nYou can also implement custom authentication schemes by adding\nJavaScript to the page (see [Including Assets](Including_Assets)).\n\nLucyBot offers several [OpenAPI extensions](OpenAPI_Extensions) for customizing the\nAPI console, including setting default field values, or populating\ndropdowns with API responses.\n\n#### Example\n```yaml\nroutes:\n  /API_Console:\n    ui: console\n    for: acme_api\n\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n```\n",title:"Console"},{markdownFile:"./markdown/uis/Markdown.md",contents:'## Markdown\n\nThe Markdown UI is a blank slate - you can include any content you want.\nThe page will still show your navbar and footer, but the content in the middle\nis entirely up to you.\n\nYou can include HTML/CSS/JavaScript as well as markdown for constructing this page.\n\n#### Example\n```yaml\nroutes:\n  /home:\n    ui: markdown\n    markdown: |\n      # Home\n      Check out <a href="http://example.com" target="_blank">our homepage<a>\n      or see the [terms of service](/terms)\n      <style>\n        a {\n          color: blue;\n        }\n      </style>\n\n  /terms:\n    ui: markdown\n    markdownFile: ./terms_of_service.html\n\n```\n',title:"Markdown"},{markdownFile:"./markdown/uis/Gallery.md",contents:"## Gallery\n\nThe gallery UI can be used to showcase multiple APIs or\nworkflows. It displays each item in a separate panel. Each panel\ncan have a title, icon, summary, and tags.\n\nIcons can either be image URLs or [Font Awesome icons](http://fontawesome.io/icons/)\n\nIf tags are specified, a left-hand menu will be show allowing users to\nfilter results by tag.\n\n#### Example\n```\nroutes:\n  /:\n    ui: gallery\n    navigation:\n\n      - title: ACME Public API\n        icon: fa-plug // Refers to Font Awesome's plug icon\n        summary: Documentation for the ACME API\n        path: /public_api\n        tags:\n          - Public\n          - ACME\n\n      - title: ACME Parnter API\n        icon: assets/parter_api.png\n        summary: Documentation for ACME's partner API\n        path: /partner_api\n        tags:\n          - Partner\n          - ACME\n\n  /public_api:\n    ui: documentation\n    for: public\n  /partner_api:\n    ui: documentation\n    for: partner\n\nspecifications:\n  public:\n    - openapi: ./public.openapi.yml\n  partner:\n    - openapi: ./partner.openapi.yml\n```\n",title:"Gallery"},{markdownFile:"./markdown/uis/Workflow.md",contents:"## Workflow\n\nWorkflows are step-by-step tutorials. Each step can\ninclude Markdown instructions and a call to the API.\n\nSee [Building Workflows](Building_Workflows) for more info.\n",title:"Workflow"}],contents:"### UIs and Routing\n\nThere are five core user interfaces available:\n* [documentation](LucyBot_yml/UIs_and_Routing/Documentation) - A set of pages driven by markdown files, API operations, and JSON Schema\n* [console](LucyBot_yml/UIs_and_Routing/Console) - An API test console for making live calls\n* [markdown](LucyBot_yml/UIs_and_Routing/Markdown) - A single page with Markdown or HTML content\n* [gallery](LucyBot_yml/UIs_and_Routing/Gallery) - If there are multiple APIs, this can be used as the homepage\n* [workflow](LucyBot_yml/UIs_and_Routing/Workflow) - A step-by-step tutorial\n\nIf you add an API specification, the **documentation** and **console** UIs\nwill be used by default. For example, with the minimal configuration:\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n```\n\nLucyBot will create pages at the following URLs:\n```no-highlight\n/acme_api/documentation\n/acme_api/console\n```\n\n#### Custom Routing\nYou can define the `routes` field in LucyBot.yml to control the URL structure\nof your documentation.\n\n```yaml\nroutes:\n  /:\n    redirect: '/docs'\n\n  /docs:\n    ui: documentation\n    for: acme_api\n\n  /console\n    ui: console\n    for: acme_api\n\n  /terms\n    ui: markdown\n    markdownFile: ./html/TermsOfService.html\n\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n```\n\n",title:"UIs and Routing"},{markdownFile:"./markdown/Specifications.md",contents:"## API Specifications\nYou can generate documentation for APIs described in OpenAPI, RAML,\nAPI Blueprint, WADL, or I/O Docs. You can specify both local files and URLs.\n\n```yaml\nspecifications:\n  acme_api:\n    - openapi: https://api.example.com/openapi.yml\n  bugs_api:\n    - api_blueprint: ./apibp.md\n  daffy_api:\n    - raml: ./raml.json\n```\n\n### Versioning\nYou can also specify multiple versions per key.  The user will be able to switch\nversions from within the UI, or you can specify the `?apiVersion=` query parameter.\n\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n      label: v1.0\n  daffy_api:\n    - raml: ./raml_spec.yml\n      label: v2.1\n    - raml: ./legacy/v1.0/raml_spec.yml\n      label: v1.0\n```\n\n",title:"API Specifications"},{markdownFile:"./markdown/navigation/Navigation.md",children:[{markdownFile:"./markdown/navigation/Nesting.md",contents:"## Nesting\n\nNavigation items can be nested to create multiple levels in the menu (we\nrecommend a maxiumum depth of 3). Each navigation item will be\navailable at a unique URL on the generated website.\n\nFor example:\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    navigation:\n\n      - markdownFile: ./Introduction.md\n        children:\n          - markdownFile: ./GettingStarted.md\n          - markdownFile: ./GetAnAPIKey.md\n          - markdownFile: ./MakeYourFirstCall.md\n```\n\n### Auto-expand\n\nIf you want nested menu items to always be shown, you can use\nthe `expand` option on the parent item:\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    navigation:\n\n      - markdownFile: ./Introduction.md\n        expand: true\n        children:\n          - markdownFile: ./GettingStarted.md\n          - markdownFile: ./GetAnAPIKey.md\n          - markdownFile: ./MakeYourFirstCall.md\n```\n\n",title:"Nesting"},{markdownFile:"./markdown/navigation/Links.md",contents:'## Creating Links\nYou may want to include links to other pages in your Markdown. The URL for each page\ncan be found by replacing any special characters (matching `/\\W+/`) with underscores.\nFor example, "ACME foo & bar" would become "ACME_foo_bar".\n\nTo create a link relative to your server root, prefix the link with `/`. Otherwise\nlinks will be treated as relative to the current route.\n\nFor example:\n```yaml\nroutes:\n  /:\n    ui: markdown\n    markdown: |\n      * Visit the [homepage](http://example.com)\n      * View the [docs](/docs)\n      * Learn [how to authenticate](/docs/Authentication)\n  /docs:\n    ui: documentation\n    navigation:\n      - title: Introduction\n        markdown: |\n          * Get an [API key](API_Key)\n\n      - title: Authentication\n        markdown: |\n          You have two options:\n          1. [Get an API key](Authentication/API_key)\n          2. [Use basic auth](Authentication/Basic)\n        children:\n          - title: API Key\n            markdown: |\n              Visit [our site](http://acme.com) to get a key.\n              Or learn how to use [basic auth](Authentication/Basic)\n          - title: Basic\n            markdown: |\n              Use the `Authentication` header.\n```\n\n',title:"Creating Links"},{markdownFile:"./markdown/navigation/OpenAPI.md",contents:"## Referencing the API\n\nIf you've included an API specification, you can reference operations,\nschemas, and tags in the spec.\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    for: acme_api\n    navigation:\n      - markdownFile: ./Introduction.md\n\n      - operation: \"GET /widget\"  // Use method and path\n      - operation: \"addWidget\"    // or operationId\n\n      - tag: users // References the 'users' tag in the OpenAPI spec.\n                   // The children of this item will be all the operations with this tag.\n\n      - definition: User   // References 'definitions' field in the OpenAPI spec.\n\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n```\n\n",title:"Referencing the API"}],contents:'## Navigation\nBy default, LucyBot will use your API specification to build the left-hand navigation\nin the `console` and `documentation` UIs. You can also set this manually to\nadd new sections and customize the grouping/order of items in the menu.\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    navigation:\n\n      - title: Introduction\n        markdown: |\n          # ACME Documentation\n          Welcome to the documentation for the ACME API.\n\n      - title: Getting Started\n        markdownFile: ./GettingStarted.md\n```\n\nThis will create pages at:\n```no-highlight\n/docs/Introduction\n/docs/Getting_Started\n/docs (redirects to /docs/Introduction)\n```\n\n### Page Content\nYou can control the content shown when the navigation item is clicked by specifying\n**one** of the following fields:\n\n* `markdown` - This is treated as a raw markdown/HTML string, like in the\n"Introduction" section above.\n* `markdownFile` - This is markdown read from a file somewhere in your repository\n* `operation` - An API operation\n* `definition` - An API schema (in JSON Schema)\n* `tag` - An API tag\n\nSee [OpenAPI](Navigation/OpenAPI) for more info on `operation`, `definition`, and `tag`.\n\nNote that markdown is unsanitized, so you can include HTML, as well as any `<script>`\nor `<style>` tags.\n\n### Options\n\nThe following fields are available on each navigation item:\n* `title` - The title of the item\n* `hide` - Hide the item from being shown in the UI\n* `expand` - Always show this item\'s children\n* `meta` - Controls `<meta>` and `<title>` tags\n  * `meta.title` - By default, will be the title above\n  * `meta.description`\n* `children` - Any sub-items to be nested under this item\n\n### Reusing Navigation Menus\nIf you want to reuse\na navigation menu for multiple routes, you can reference it by it\'s field name:\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    for: acme_api\n    navigation: acme_navigation\n  /console\n    ui: console\n    for: acme_api\n    navigation: acme_navigation\n\nacme_navigation:\n  - markdownFile: ./Introduction\n  - operation: "GET /widget"\n  - operation: "POST /widget"\n```\n',title:"Navigation"}],contents:'## LucyBot.yml\nIn the top-level directory of your repository, create a LucyBot.yml\nfile.  This will tell LucyBot how to build your documentation.\n\nYou **must** provide either the `specifications` field or the `routes`\nfield in LucyBot.yml (or both).\n\n#### Example 1 - single page\nThis LucyBot.yml generates a single page that uses Markdown.\n\n```yaml\nroutes:\n  /home:\n    ui: markdown\n    markdown: |\n      # Hello World!\n```\n\nSee [UIs and Routing](LucyBot_yml/UIs_and_Routing) for a list of available UIs.\n\n#### Example 2 - using OpenAPI\nThis LucyBot.yml uses an OpenAPI specification to auto-generate\ndocumentation and console pages.\n\n```yaml\nspecifications:\n  acme_api:\n    - openapi: ./openapi.yml\n```\n\n### Available Fields\nThe following fields are available in LucyBot.yml:\n\n* `specifications` - A list of different API specifications to generate docs for. See [Specifications](LucyBot_yml/API_Specifications)\n* `routes` - Controls URL structure, navigation, and SEO. See [Routing](LucyBot_yml/UIs_and_Routing)\n* `javascript` - An array of JavaScript files or URLs to include\n* `css` - An array of CSS files or URLs to include\n* `discussionURL` - Will be included as an iframe in documentation pages. See [Discussion Pages](Discussion_Pages)\n* `sitemap` - Options for generating sitemap.xml\n  * `sitemap.hostname`\n* `favicon` - URL for `<link rel="icon">`\n* `hljsTheme` (default `github`) - A theme name for [highlightjs](https://highlightjs.org/static/demo/)\n* `github` - Options for GitHub authentication (to enable community edits)\n  * `github.repo` - The name of the repository LucyBot.yml is in\n  * `github.redirect_uri`\n  * `github.client_id`\n* `useHash` (default `false`) - Use hashes instead of paths for navigation (`example.com/#/foo` instead of `example.com/foo`)\n* `basePath` - If the generated LucyBot site is not mounted on your server\'s root, you\'ll need to set this\n* `loadOpenAPISynchronous` - A performance improvement if you\'re using the `--prerender` option\n\n### LucyBot.js\nIf you want to build your configuration dynamically, you can create `LucyBot.js` instead of `LucyBot.yml`:\n\n```javascript\nmodule.exports = {\n  specifications: {\n    acme_api: {\n      openapi: "./openapi.yml"\n    }\n  }\n}\n```\n',title:"LucyBot.yml"},{markdownFile:"./markdown/BuildingTheSite.md",children:[{markdownFile:"./markdown/DevelopmentMode.md",contents:"## Development Mode\n> The LucyBot server should **not** be used in production\n\nRebuilding your site each time you make a change can slow down\nthe development cycle, so LucyBot provides a development server\nthat auto-reloads your changes.\n\n```bash\nlucybot serve --port 3000\n\n# Server is now listening on port 3000\n# Any file changes will be automatically reloaded\n```\n\nNote that for changes to HTML templates (navbar, footer, and loading screen)\nyou'll need to restart the server.\n\n",title:"Development Mode"},{markdownFile:"./markdown/Travis.md",contents:'### Travis Integration\nYou can use Travis to build your website. This is particularly helpful if you\nwant to use the `prerender` option, which can take a while for large sites\n(about 1 second per page).\n\nHere\'s a sample `.travis.yml` and build script. Each time Travis sees a push\nto your repository, it will build your docs in a second repository and push\nthe result.\n\nNote that you\'ll need to set the environment variables:\n* LUCYBOT_ACCESS_TOKEN - the token provided to you upon purchase\n* PERSONAL_ACCESS_TOKEN - an [OAuth token](https://github.com/settings/tokens) with push access to your target repo\n\n##### ./.travis.yml\n```yaml\nlanguage: node_js\nnode_js:\n      - "6"\nbefore_install:\n  - "npm install -g https://$LUCYBOT_ACCESS_TOKEN@github.com/LucyBot-Inc/documentation-generator"\nscript:\n  - ./scripts/build-and-commit.sh\n```\n\n##### ./scripts/build-and-commit.sh\n```bash\nset -e\n\ngit clone https://github.com/ACME/api_docs_generated ../api_docs_generated\nrm -rf ../api_docs_generated/*\nlucybot build --prerender --destination ../api_docs_generated\n\ncd ../api_docs_generated\ngit config --global user.name "Travis CI"\ngit config --global user.email "me@acme.com"\necho "Commiting build"\ngit add .\ngit commit -a -m "Build API docs [skip ci]"\ngit push -q -u https://$PERSONAL_ACCESS_TOKEN@github.com/ACME/api_docs_generated HEAD:master >> /dev/null 2>&1\n```\n\n',title:"Travis Integration"}],contents:"## Building the Website\n\nOnce you have a directory with `LucyBot.yml`, you can use the `lucybot` tool\nto build a portable set of HTML, CSS, and JavaScript assets:\n\n```bash\ncd /path/to/my/LucyBot/docs/\nlucybot build\n```\n\nThis will create a `www` folder that can be served using Apache, GitHub Pages,\nAmazon S3, PHP, NodeJS Express, etc.\n\n### Options\n* `--directory` - path to directory containing `LucyBot.yml`\n* `--destination` - path to place generated assets (default is $directory/www)\n* `--noredirect` - Generate an `index.html` for every possible URL\n* `--prerender` - Prerender an `index.html` for every possible URL (requires PhantomJS)\n* `--basePath` - Set the base path on which the documentation will be served (overrides `basePath` field in LucyBot.yml)\n\n",title:"Building the Website"},{markdownFile:"./markdown/Hosting.md",contents:"## Hosting the Website\n\nAfter running `lucybot build`, you'll have a directory containing\nan `index.html` file, along with CSS, JavaScript, and other HTML\nassets. You have several options for serving this documentation to\nyour users.\n\n### GitHub Pages\nGitHub offers free, public website hosting through [GitHub pages](https://pages.github.com/).\nBy default, you'll get the domain `your-username.github.io`, but you can also\nadd a custom domain in the Settings section of your repository.\n\nYou can serve your website from a particular branch in your repository, or\nfrom the `docs/` directory on the master branch. We use the latter\nstrategy below:\n\n```bash\nlucybot build --destination ./docs\ngit add docs/*\ngit commit -m \"Build website\"\ngit push -u origin master\n```\n\nBe sure to visit the Settings page in your repository to enable GitHub Pages.\n\n### Apache\nYou can output the website to your `www` folder:\n```bash\nlucybot build --destination /var/www/html/\n```\n\n### Amazon S3\n```\nlucybot build\ns3 sync ./www s3://mybucket\n```\n\n### PHP\n```bash\nlucybot build\nphp -S 0.0.0.0:80 -t ./www\n```\n",title:"Hosting the Website"},{title:"Branding and Customization",markdown:"LucyBot offers several options for customizing the look and\nfeel of your documentation. You can use Bootstrap themes\nto specify your brand's preferred colors and fonts, and include\nHTML templates to customize the navbar, footer, and loading screen.\n",children:[{markdownFile:"./markdown/Bootstrap.md",contents:'## Bootstrap Theme\n\nBootstrap offers a [large set of variables](http://getbootstrap.com/customize/)\nto control fonts, sizing, colors, and more. You can check out a sample\nset of Bootstrap themes on [Bootswatch](https://bootswatch.com/).\n\nThe easiest way to add a Bootstrap theme is to create the file\n`styles/bootstrap.scss`, which should set any Bootstrap variables\nyou care about. You can create this file from the Bootswatch themes\nabove by clicking "Download" -> "_variables.scss".\n\nFor example, `styles/bootstrap.scss` could look like this:\n```sass\n$brand-primary: #df691a;\n$brand-success: #43ac6a;\n$brand-info: lighten($brand-primary, 13.5%);\n$brand-warning: #E99002;\n$brand-danger: #F04124;\n```\n\nYou can also include fonts in `bootstrap.scss`:\n```sass\n@import url(\'https://fonts.googleapis.com/css?family=Lato:regular,italic,900\');\n$font-family-sans-serif: "Lato", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;\n```\n\n### Customization Tools\nThere are many tools for creating custom Bootstrap themes. We like:\n* [Strapping!](https://bobby-brennan.github.io/strapping)\n* [Bootstrap Live Customizer](http://bootstrap-live-customizer.com/)\n',title:"Bootstrap Theme"},{markdownFile:"./markdown/Templates.md",contents:'## Navbar and Footer\n\nYou can create HTML templates to customize the navbar at the top of the screen,\nthe footer at the bottom, and the loading screen shown briefly when users first\nvisit the site.\n\nNote that you have access to both [Bootstrap classes](http://getbootstrap.com)\nand [Font Awesome icons](http://fontawesome.io/icons/).\n\n\n### Navbar\nNavbar HTML should be contained in `templates/navbar.html`.\n\nThe navbar should use [Bootstrap\'s Navbar classes](http://getbootstrap.com/components/#navbar).\n\nHere\'s an example:\n```html\n<nav class="navbar navbar-inverse">\n  <div class="container-fluid">\n    <div class="navbar-header">\n      <a href="/" class="navbar-brand">\n        ACME API\n      </a>\n    </div>\n    <ul class="nav navbar-nav navbar-right">\n      <li>\n        <a href="http://lucybot.com" target="_blank">Document your API</a>\n      </li>\n    </ul>\n  </div>\n</nav>\n```\n\n### Footer\nFooter HTML should be contained in `templates/footer.html`.\n\nThe footer can contain any HTML, but it\'s recommended you wrap it with a\n`container-fluid` to preserve alignment.\n\n```html\n<div class="container-fluid">\n  <div class="row">\n    <div class="col-xs-6">\n      Copyright &copy; 2017 ACME Inc.\n    </div>\n    <div class="col-xs-6 text-right">\n      <a href="/disclaimer">Terms</a>\n    </div>\n  </div>\n</div>\n```\n\n### Loading\nLoading HTML should be contained in `templates/loading.html`.\n\nHere\'s the default loading template:\n```html\n<style>\n  .loading-screen {\n    text-align: center;\n    padding-top: 100px;\n  }\n</style>\n<div id="LoadingScreen" class="loading-screen">\n  <h1><i class="fa fa-spin fa-refresh"></i><h1>\n</div>\n```\n',title:"Navbar and Footer"},{markdownFile:"./markdown/CSSClasses.md",contents:"## CSS Classes\n\nLucyBot supports adding CSS to the page (see [Including Assets](Including_Assets) for more info).\n\nYour CSS will be included after all third-party and LucyBot CSS, so you can override\nany style you see on the page.\n\nThe easiest way to do this is to use your browser's console to inspect page elements\n(`CMD + Shift + C` in Chrome), but we provide some helper classes below for common customizations.\n\n> Want to customize something that isn't listed here? [Let us know!](http://lucybot.com/#Contact)\n\n#### Breadcrumbs\nThe title at the top of every page has the `.breadcrumbs` class:\n```css\n.breadcrumbs {\n  font-size: 42px;\n}\n```\n\n#### Side Menu\nThe left-hand navigation has the `.side-menu` class:\n```css\n.side-menu {\n  box-shadow: none;\n}\n```\n\n#### HTTP method colors\nHTTP operation titles will have GET/POST/DELETE with an\nappropriate background color. You can change these by selecting\n`span[data-method]`:\n\n```css\nspan[data-method=\"delete\"] {\n  background-color: red;\n}\n```\n\n### Fixed-position Navbar and Menu\nA common modification is to fix the navbar and side menu so they are always visible,\neven when the user scrolls down the page.\n\nTo achieve this, add the class `navbar-fixed-top` to your `<nav>` in `navbar.html`\n(see [Navbar and Footer](Branding_and_Customization/Navbar_and_Footer)).\n\nYou'll also need to add padding to the body\n[per the Bootstrap docs](http://getbootstrap.com/components/#navbar-fixed-top):\n\n```\nbody {\n  padding-top: 70px; /* adjust based on the size of your navbar */\n}\n```\n\nTo keep the side menu in fixed position, add the following CSS\n(we use `@media` queries to restrict to desktop since the side menu UI is different on mobile):\n\n```css\n@media (min-width: 768px) {\n  .side-menu {\n    position: fixed;\n    top: 70px; /* adjust based on the size of your navbar */\n    bottom: 0px;\n    left: 0px;\n    width: 33.33%;\n    box-shadow: none;\n  }\n}\n\n@media (min-width: 992px) {\n  .side-menu {\n    width: 25%;\n  }\n}\n```\n\n",title:"CSS Classes"},{markdownFile:"./markdown/CustomizationExtras.md",contents:"## Favicon\nYou can specify the site's favicon URL in LucyBot.yml, e.g.\n```yaml\nfavicon: http://example.com/favicon.ico\n```\n\nIf the favicon file is located in your [assets directory](Including_Assets),\nyou can reference it locally:\n```yaml\nfavicon: assets/favicon.ico\n```\n\n",title:"Favicon"}],contents:"LucyBot offers several options for customizing the look and\nfeel of your documentation. You can use Bootstrap themes\nto specify your brand's preferred colors and fonts, and include\nHTML templates to customize the navbar, footer, and loading screen.\n"},{markdownFile:"./markdown/OpenAPIExtensions.md",contents:'## OpenAPI Extensions\n\nWe utilize a few extra OpenAPI fields to help describe your documentation.\n\n#### `operation[\'x-parameterGroups\']`\nGroups related parameters together.  In the UI, each group of parameters can be expanded/collapsed. All ungrouped parameters will be shown after all grouped parameters.\n\nBe sure to set `parameter[\'x-group\']` to the proper group name for each parameter.\n\nEach group should have a name and a description.  Groups can also have subGroups.\n\n```javascript\noperation.parameters = [\n  {name: \'message_body\', \'x-group\': \'message\'},\n  {name: \'recipient_email\', \'x-group\': \'recipient\'},\n  {name: \'recipient_name\', \'x-group\': \'recipient\'},\n];\noperation[\'x-parameterGroups\'] = [{\n  name: \'message\',\n  description: \'The message to send\',\n  subGroups: [{\n    name: \'recipient\',\n    description: \'The recipient of the message\'\n  }]\n}]\n```\n\n#### `parameter[\'x-global\']`\nWhen x-global is set to `true`, the value for this parameter will be preserved as the\nuser navigates between operations in the API console. This is particularly useful for\nparameters that control the output format of the API (e.g. JSON vs XML) or other parameters\nthat are unlikely to change.\n\n#### `parameter[\'x-examples\']`\nFor parameter.in == \'body\', functions exactly like `response.examples`.\n\n[See OpenAPI Example Object](http://swagger.io/specification/#exampleObject)\n\n#### `parameter[\'x-inputType\']`\nDetermines what UI element is used to control this parameter.  Valid values are:\n* text\n* number\n* dropdown\n* checkboxes\n* file\n* dynamicArray\n* body\n\n#### `parameter[\'x-enumLabels\']`\nUse this field to specify labels for each element of `parameter.enum`.\nThese labels will appear in the dropdown for the parameter inside the LucyBot UI.\n\nx-enumLabels should be an array of strings the same length as parameter.enum.\n\nFor example:\n```js\n{\n  "parameters": [{\n    "name": "city_id",\n    "enum": [1, 2, 3],\n    "x-enumLabels": ["New York", "Los Angeles", "Tokyo"],\n  }]\n}\n```\n\n#### `parameter[\'x-dynamicEnum\']`\nThis populates [parameter.enum](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#parameterObject)\nwith a call to the API.  For example, you might have endpoints `GET /stories`, which returns an array\nof story IDs, and `GET /story/{id}`, which gets the details of a given story.  You can use dynamicEnum to\nauto-populate an enum for the `{id}` input with a call to  `GET /stories`.\n\nSetting x-dynamicEnum will cause x-inputType to be a dropdown by default. You can also set x-inputType\nto \'text\' to allow free-text in addition to the enum choices.\n\nAs an example, say `GET /stories` returns this response:\n```json\n{\n  "stories": [{\n    "id": 123,\n    "title": "Story 1" \n  }, {\n    "id": 456,\n    "title": "Story 2"\n  }]\n}\n```\n\nThen we can set x-dynamicEnum for the `{id}` parameter to show a dropdown with these stories.\n\n```js\nvar idParam = openapi.paths[\'/story/{id}\'].get.parameters[0];\nidParam[\'x-dynamicEnum\'] = {\n  "path": "/stories",\n  "method": "get",\n  "parameters": [{\n    "name": "page",\n    "value": 1\n  }]\n  "array": "stories",\n  "label": "title",\n  "value": "id"\n}\n```\n',title:"OpenAPI Extensions"},{markdownFile:"./markdown/Including_Assets.md",contents:'## Including Assets\n\nYou might want to serve certain assets alongside your LucyBot documentation,\nsuch as image files for your logo and favicon, or an HTML page to be\nloaded in an iframe.\n\nTo achieve this, you can create an `assets` directory which will be copied over to the final\nbuild. Each file will be available at the URL `assets/filename.extension`.  Subdirectories\nare also allowed.\n\nFor example, you might want to create `assets/img/ACME_logo.png`, and use this in `templates/navbar.html`\n(see [Navbar and Footer](../Branding_and_Customization/Navbar_and_Footer) for more info):\n\n```html\n<nav class="navbar navbar-inverse">\n  <div class="container-fluid">\n    <div class="navbar-header">\n      <img src="assets/img/ACME_logo.png">\n    </div>\n  </div>\n</nav>\n```\n\n### CSS and JavaScript\n\nYou can add CSS and JavaScript files to the page by creating directories\n`styles/` and `javascript/`. The files in these directories will be concatenated\nand included in the final page, **in alphabetical order**. They will be loaded after\nall third-party libraries (such as jQuery), but before the app is initialized.\n\nIf ordering is important, or if you want to include JS/CSS from external URLs,\nyou can also specify the `javascript` and `css` fields in `LucyBot.yml`:\n\n```yaml\njavascript:\n  - https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js\ncss:\n  - assets/css/acme_styles.css\n```\n',title:"Including Assets"},{markdownFile:"./markdown/SEO.md",contents:'## Search Engine Optimization\n\nLucyBot\'s SEO tools allow you to control how your documentation appears in\nsearch results.  You can set the `<meta>` and `<title>` tags for any page in your\ndocs. You can also generate a sitemap for the entire site.\n\nIf you don\'t manually set these tags, LucyBot will use your API specification\nand markdown to auto-generate them.\n\n### Top-level pages\nEach page specified in the `routes` section of `LucyBot.yml` can have it\'s own\nmeta tags:\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    meta:\n      title: "ACME API Documentation"\n      description: "Documentation for using the ACME API"\n```\n\nSearch engines will then *usually* show the following in search results:\n\n------------\n\n#### ACME API Documentation\nDocumentation for using the ACME API\n\n------------\n\n### Sub-pages\nYou can also set additional meta info for sub-pages within each route.\nThe sub-page\'s title will still include the top-level title. For example:\n\n```yaml\nroutes:\n  /docs:\n    ui: documentation\n    meta:\n      title: "ACME API Documentation"\n      description: "Documentation for using the ACME API"\n    navigation\n      - title: Introduction\n        markdownFile: ./Introduction.md\n        meta:\n          title: "Getting Started"\n```\n\nThis will make the `<title>` for the Introduction page "Getting Started - ACME API Documentation".\nHad we not specified the `meta` section for the Introduction item, the title would have been\n"Introduction - ACME API Documentation".\n\n### Sitemap\nTo generate a sitemap, add the following to LucyBot.yml:\n\n```yaml\nsitemap:\n  hostname: https://docs.acme.com\n```\n\nreplacing `docs.acme.com` with your hostname.\n\n',title:"Search Engine Optimization"},{markdownFile:"./markdown/Tracking.md",contents:'## Event Tracking\n\nEvent tracking is a great way to understand user behavior and measure success.\nLucyBot integrates directly with [Mixpanel](http://mixpanel.com), which has a sizeable\nfree tier. However, you can also use Google Analytics or other event\ntracking systems.\n\n### Mixpanel\nTo add Mixpanel tracking, you\'ll need to copy the JavaScript code\nprovided by mixpanel into the file `javascript/mixpanel.js` (be sure\nto remove the `<script>` tags).\n\nFor example:\n```js\n(function(f,b){if(!b.__SV){var a,e,i,g;window.mixpanel=b;b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");2==a.length&&(b=b[a[0]],h=a[1]);b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==typeof d?c=b[d]=[]:d="mixpanel";c.people=c.people||[];c.toString=function(b){var a="mixpanel";"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};c.people.toString=function(){return c.toString(1)+".people (stub)"};i="disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");\nfor(g=0;g<i.length;g++)f(c,i[g]);b._i.push([a,e,d])};b.__SV=1.2;a=f.createElement("script");a.type="text/javascript";a.async=!0;a.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";e=f.getElementsByTagName("script")[0];e.parentNode.insertBefore(a,e)}})(document,window.mixpanel||[]);\nmixpanel.init("YOUR_MIXPANEL_ID");\n```\n\n### Other trackers\nYou can add the file `javascript/tracking.js`, and define a function which\nsends tracking events to the system of your choice.\nThe function should take in an event name, and an object with key-value properties.\n\nFor example, to use Google Analytics:\n\n```js\n/* Paste Google Analytics setup here */\n\nwindow.lucybot.tracker = function(name, properties) {\n  for (var key in properties) {\n    ga(\'send\', {\n      hitType: \'event\',\n      eventCategory: name,\n      eventAction: key,\n      eventLabel: key,\n      eventValue: properties[key],\n    })\n  }\n}\n```\n',title:"Event Tracking"},{markdownFile:"./markdown/DiscussionPages.md",contents:"## Discussion Pages\n\nYou can add a discussion page to any page in the documentation UI.\nIt will be included inside an iframe.\n\nTo set the discussion URL for every page, use the `discussionURL` field\nin `LucyBot.yml`:\n```yaml\ndiscussionURL: https://forums.example.com?q={{title}}\n```\n\nNote that occurrences of `{{title}}` in the the URL will be replaced\nwith the page title.\n\nYou can also set `discussionURL` for individual navigation items:\n\n```yaml\nroutes:\n  /:\n    ui: documentation\n    navigation:\n      - markdownFile: ./Introduction.md\n      - markdownFile: ./GetAnAPIKey.md\n        discussionURL: https://forums.example.com/thread/get-an-api-key\n```\n",title:"Discussion Pages"},{markdownFile:"./markdown/GitHub.md",contents:"## GitHub Integration\n> GitHub integration is currently experimental\n\nYou can integrate your documentation with GitHub to allow\nteammates and users to suggest edits to your docs. Currently\nthis only works for adding and contributing workflows.\n\nYou'll need to register a GitHub appliation at [github.com/settings](http://github.com/settings),\nand add your credentials to LucyBot.yml:\n\n```yaml\ngithub:\n  repo: \"ACME/acme_docs\"\n  client_id: \"a5dc854e03c060741218\"\n  access_token_url: \"http://acme.com/github/access_token\"\n```\n\n### Server-side component\nFor security reasons, you'll need to implement server-side logic for generating\nan access token. The URL to trigger this logic must be specified in the `access_token_url` field\nin `LucyBot.yml`.\n\nHere's an example using NodeJS Express:\n```js\nvar router = module.exports = require('express').Router();\nvar request = require('request');\n\nrouter.post('/access_token', function(req, res) {\n  request({\n    method: 'post',\n    url: 'https://github.com/login/oauth/access_token',\n    headers: {'Accept': 'application/json'},\n    json: true,\n    qs: {\n      client_id: process.env.GITHUB_CLIENT_ID,\n      client_secret: process.env.GITHUB_CLIENT_SECRET,\n      code: req.query.code,\n    },\n  }, function(err, response, body) {\n      if (err) res.status(500).send(err);\n      else res.json(body);\n  });\n});\n```\n",title:"GitHub Integration"},{markdownFile:"./markdown/Workflows.md",contents:'# Building Workflows\n\nWorkflows are step-by-step tutorials for using your API. They are\ndriven by Markdown documents in the `workflows/` directory.\n\nTo create your first workflow, create the file `workflows/sample_workflow/readme.md`:\n````markdown\n# Widgets\n\n## Create a widget\nUse the `POST /widgets` endpoint to create a new widget.\n\n### API Call\n```json\n{\n  "method": "post",\n  "path": "/widgets",\n}\n```\n````\n\nThis will create a one-step workflow that shows the user how to create a new widget.\nThe step will show an API console that calls `POST /widgets`, and will show the\nstep as completed once the user has successfully used the console.\n\n### Workflow Steps\nEach step starts with a `##` line, which serves as its title (e.g. "Create a widget" above).\nBelow this, you can put instructions for this step - this is a good place to include links\nto external resources.\n\n### API Calls\nIn any step, you can include an API console that the user will have to use to complete the step.\nCreate an "API Call" section (with a `###` heading), and specify the `method` and `path`\nyou want to use. If you want the user to focus on certain parameters, you can specify which ones appear:\n\n````markdown\n### API Call\n```json\n{\n  "method": "post",\n  "path": "/widgets",\n  "parameters": [{\n    "name": "widgetName"\n  }, {\n    "name": "widgetDescription",\n    "default": "A new widget"\n  }, {\n    "name": "widgetType",\n    "default": "doodad",\n    "hidden": true\n  }]\n}\n```\n````\n\n### Sample Code\nYou can include sample code for multiple programming languages for any step:\n\n````markdown\n### Sample Code (JavaScript)\n``` javascript\nconsole.log(\'hello world\');\n```\n\n### Sample Code (Java)\n```java\nSystem.out.println("Hello world");\n```\n````\n',title:"Building Workflows"}],basePath:"/",oauth:!1,workflows:{},codegen:{disabled:!0,languages:[],templates:{},setupTemplates:{}},bootstrap:{bootstrapVersion:3,styleLoaders:["style-loader","css-loader","sass-loader"],styles:!0,preBootstrapCustomizations:"/home/ubuntu/git/lucybot-docs/styles/bootstrap.scss"},javascript:[],css:[],github:{redirect_uri:"",client_id:"",repo:"",workflowDirectory:"workflows"},templates:{navbar:'<nav class="navbar navbar-default">\n  <div class="container-fluid">\n    <div class="navbar-header">\n      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#NavbarCollapse" aria-expanded="false">\n        <span class="sr-only">Toggle navigation</span>\n        <span class="icon-bar"></span>\n        <span class="icon-bar"></span>\n        <span class="icon-bar"></span>\n      </button>\n      <a class="navbar-brand" href="http://lucybot.com">\n        <img src="assets/logo-white.svg">\n      </a>\n    </div>\n    <div id="NavbarCollapse" class="collapse navbar-collapse">\n      <ul class="nav navbar-nav navbar-right">\n        <li>\n          <a href="http://lucybot.com/">About</a>\n        </li>\n        <li>\n          <a href="http://lucybot.com/#Pricing">Pricing</a>\n        </li>\n        <li>\n          <a href="http://lucybot.com/#Contact">Contact</a>\n        </li>\n      </ul>\n    </div>\n  </div>\n</nav>\n\n',loading:'<style>\n  .loading-screen {\n    min-height: 500px;\n    text-align: center;\n    padding-top: 100px;\n  }\n</style>\n<div id="LoadingScreen" class="loading-screen">\n  <h1><i class="fa fa-spin fa-refresh"></i><h1>\n</div>\n\n'},externalCSS:!0}}},[1074]);